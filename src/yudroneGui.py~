#!/usr/bin/env python

'''************************************************************************************************************************
Td
***************************************************************************************************************************
Project:	yudrone
Author:		Michael Dicke
Repository:	https://github.com/mdicke2s/yudrone
************************************************************************************************************************'''


# system
import subprocess, os, wx, sys, getopt, struct
import threading
import thread

# wx gui
import wx
import wx.py

from flight import *

XLIVEVIEW = 665
YLIVEVIEW = 425
XWINDOW = 1200
YWINDOW = 720
PADDING = 5

'''************************************************************************************************************************
main class of project (controller & view)
************************************************************************************************************************''' 
class yudroneGui():
  
  def __init__(self, flight):
    '''
    Constructor
    '''
    self.flight=flight
      
  '''************************************************************************************************************************
  GUI
  ************************************************************************************************************************'''
  def initGui(self):  
    '''
    inits the yudrone GUI
    * layout
    * left + right widgets
    '''
  
    # stage 1: layout ................................................
    #boxes and borders
    wx.StaticBox(self.flight, -1, 'LiveView', (PADDING, PADDING), size=(XLIVEVIEW, YLIVEVIEW))
    wx.StaticBox(self.flight, -1, 'Diagnostics', (XLIVEVIEW + PADDING, PADDING), size=(XWINDOW - XLIVEVIEW - 2*PADDING, YWINDOW-2*PADDING))
    wx.StaticBox(self.flight, -1, 'Input', (PADDING, YLIVEVIEW + PADDING), size=(XLIVEVIEW, YWINDOW-YLIVEVIEW-2*PADDING))
    
    #create sizer
    sizeAll = wx.BoxSizer(wx.HORIZONTAL)
    sizeLeft = wx.BoxSizer(wx.VERTICAL)
    sizeRight = wx.BoxSizer(wx.VERTICAL)
    sizeRadioBtn1 = wx.BoxSizer(wx.HORIZONTAL)
    sizeRadioBtn2 = wx.BoxSizer(wx.HORIZONTAL)
    sizeCli = wx.BoxSizer(wx.HORIZONTAL)
    
    # stage 2: left widgets ........................................
    #create left
    self.flight.imageView = wx.StaticBitmap(self.flight, wx.ID_ANY, wx.BitmapFromImage(wx.EmptyImage(640, 360)), (3*PADDING, 6*PADDING))
    
    self.flight.rbFront = wx.RadioButton(self.flight, 0, 'front-camera', style=wx.RB_GROUP)
    self.flight.rbBottom = wx.RadioButton(self.flight, 0, 'bottom-camera')
    self.flight.rbFront.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBVideo)
    self.flight.rbBottom.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBVideo) 
    #self.flight.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBVideo, id=self.flight.rbFront.GetId()) 
    #self.flight.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBVideo, id=self.flight.rbBottom.GetId())
    self.flight.rbFront.SetValue(True)
    
    self.flight.rbJoypad = wx.RadioButton(self.flight, 0, 'joypad-only', style=wx.RB_GROUP)
    self.flight.rbConsole = wx.RadioButton(self.flight, 0, 'console')
    self.flight.rbJoypad.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBInput) 
    self.flight.rbConsole.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBInput)
    #self.flight.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBInput, id=self.flight.rbJoypad.GetId()) 
    #self.flight.Bind(wx.EVT_RADIOBUTTON, self.flight.OnRBInput, id=self.flight.rbConsole.GetId())
    self.flight.rbJoypad.SetValue(True)
    
    self.flight.CommandList = ['Altitude(', 'MaxAlt(', 'MinAlt(', 'Yaw(', 'YawSpeed(',
		 'Horizontal(', 'HrzSpeed(', 'TakeOff()', 'Land()',
		 'Pause()', 'Continue()', 'Break()', 'Batch(', 'Exit()',
		 'ToggleEmerg()', 'Face(', 'Release()', 'Search(',
		 'Approach(', 'Navigate(']    
    self.flight.cmbCommands = wx.ComboBox(self.flight, 0, choices=self.flight.CommandList, style=wx.CB_READONLY)
    self.flight.Bind(wx.EVT_COMBOBOX, self.flight.OnSelectCmd, id=self.flight.cmbCommands.GetId())
    self.flight.cmdShell = wx.py.shell.Shell(self.flight, size =(XLIVEVIEW, YLIVEVIEW / 2))
    
    #assemble left
    sizeRadioBtn1.Add(self.flight.rbFront, 0, wx.ALL, 0)
    sizeRadioBtn1.Add(self.flight.rbBottom, 0, wx.ALL, 0)
    sizeRadioBtn2.Add(self.flight.rbJoypad, 0, wx.ALL, 0)
    sizeRadioBtn2.Add(self.flight.rbConsole, 0, wx.ALL, 0)
    
    sizeLeft.Add(wx.StaticText(self.flight), 0, wx.ALL, 0) #spacer
    sizeLeft.Add(self.flight.imageView, 0 ,wx.ALL, 10)
    sizeLeft.Add(sizeRadioBtn1, 0 ,wx.CENTER, 5)
    
    sizeLeft.Add(wx.StaticText(self.flight), 0, wx.ALL, 5) #spacer
    sizeLeft.Add(self.flight.cmbCommands, 0, wx.EXPAND, 10)
    sizeLeft.Add(self.flight.cmdShell,0,wx.EXPAND,5)
    sizeLeft.Add(sizeRadioBtn2, 0 ,wx.CENTER, 10)
    
    # stage 3: right widgets .......................................
    #create right
    self.flight.txtConnection = wx.StaticText(self.flight) #spacer
    self.flight.txtBattery = wx.StaticText(self.flight)
    self.flight.txtState = wx.StaticText(self.flight)
    self.flight.txtAltd = wx.StaticText(self.flight)
    
    self.flight.txtConnection.SetLabel('Connection: NONE')
    self.flight.txtBattery.SetLabel('Battery: UNKNOWN')
    self.flight.txtState.SetLabel('Status: UNKNOWN')
    self.flight.txtAltd.SetLabel('Altitude (mm): ')
    
    #assemble right
    sizeRight.Add(wx.StaticText(self.flight), 0, wx.ALL, 5)
    sizeRight.Add(self.flight.txtConnection, 0, wx.ALL, 5)
    sizeRight.Add(self.flight.txtBattery, 0, wx.ALL, 5)
    sizeRight.Add(self.flight.txtState, 0, wx.ALL, 5)
    sizeRight.Add(self.flight.txtAltd, 0, wx.ALL, 5)
    
    # stage 4: finalize ............................................
    #finalize
    sizeAll.Add(sizeLeft, 0, wx.ALL, 5)
    sizeAll.Add(sizeRight, 0, wx.ALL, 5)
    self.flight.SetSizer(sizeAll)    
    self.flight.Bind(wx.EVT_CLOSE, self.flight.OnClose)
    rospy.loginfo('GUI initialized')
    rospy.loginfo('yudrone is ready...')

  def OnClose(self, event='NONE'):
    '''
    Callback function for closing application
    '''
    if self.flight.droneState != 2 or self.flight.droneState != 0:
      self.flight.pub_emergency.publish( Empty() )
    dlg = wx.MessageDialog(self.flight, "Do you really want to close this application?", "Confirm Exit", wx.YES_NO|wx.YES_DEFAULT|wx.ICON_QUESTION)
    result = dlg.ShowModal()
    dlg.Destroy()
    if result == wx.ID_YES:
      self.flight.Destroy()
      rospy.signal_shutdown('closing yudrone')
      rospy.loginfo('Shutting down')